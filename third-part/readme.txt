THRID-PART

v_0.6 - добавлен календарь.
v_0.7 - добавлена логика в список рекомендаций. Теперь список рекомендуемых комнат меняется при изменении полей: время начала, время конца, добавлении и удалении пользователей. Поле даты пока не проверяется и при некорректном значении может привести к глобальной ошибке.
      - список рекомендаций меняется по следующим параметрам: отображаются только доступные в выбранное время переговорки, отображаются только переговорки у которых вместительность больше или равна выбранному кол-ву участников, список сортируется по общему числу пройденных всеми участниками этажей.
v_0.8 - если ни одна переговока не подходит, то проверяется можно ли перенести какую-либо встречу в это же время в переговорку меньших размеров, с целью освободить подходящую переговорку. В блоке рекомендаций появляются сообщения, они пока не кликабельны.

v_0.9 - доделан алгоритм рекомендаций, пункты А и Б из задания работают, за исключением того, что если ничего освободить нельзя, то не показывается (пока) ближайшая переговорка которая освободится.
__________________
Проэкт собран с помощью webpack'a , исходники лежат в папке "src"
Был использован babel-preset-es2015, url-loader, file-loader, postcss-loader с autoprefixer' ом.
___________________
Изменено: 
1) при сбросе БД время встреч округляется до 15
2) в БД в схеме для Event добавленно поле 'dateDay' которое содержит дату встречи с нулевым временем, сделано это для выборки из БД при запросах, на конкретные дни.
___________________
1)	Первым делом клиент запрашивает у сервера списки пользователей, комнат и  встреч(для текущей даты).
2)	Далее в aside добавляются все полученные и отсортированные по этажам от меньшего к большому переговорки, и на диаграммах отрисовываются встречи для каждой из переговорок.

2.1) Встречи отрисовываются путем поочередного добавления блоков свободного и занятого времени, в зависимости от отсортированного массива событий конкретной переговорки. Блокам с занятым временем задаются data-attributes с названием встречи, датой начала, датой конца и тд.

3)	Задается setInterval который обновляет положение и значение курсора времени каждые 30 секунд.
4)	Задается еще один setInterval который выполняется каждые 90 секунд и выполняет пункт номер (2) предварительно обновив (запросив у сервера ) список событий.
5)	При клике по занятому времени всплывает тултип в который передаются данные из data-attributes данного блока.
6)	При клике на кнопку редактирования, появляется окно редактирования встречи, с заполненными полями.
7)	При клике на крестик у выбранной переговорки появляется список всех переговорок, с возможностью выбора.

8)	При клике на кнопку сохранить происходят следующие проверки:
1. Все инпуты должны быть заполнены
2. Должно быть выбранно не меннее двух участников
3. Должна быть выбрана переговорка.
4. Минуты время начала и время конца должны быть кратны 15.
5. Получившаяся дата начала должна быть не меньше чем текущая дата и время.
6. Время начала и время конца должны быть в пределах от 8:00 до 23:00.
7. Проверятся доступность времени для выбранной переговорки

Соответсвующим полям задается красная рамка.

Если все проверки прошли то выполняется запрос mutation {updateEvent()}

9)	Все аналогичное происходити при нажатии на кнопку «создать встречу» в окне создания встречи, которое появялется при клике на кнопку “создать встречу” в header или при клике на поле свободного времени. (выполняется запрос mutation {createEvent()})

10)	При клике на кнопку удалить всплывает окно с подтверждением и если удаление подтверждается посылается запрос mutation {removeEvent()}
11)	За курсором времени тянутся блоки которые закрывают собой все прошедшие встречи

12)	Если текущее время меньше 8 утра то курсор времени находится в самом начале диаграмм, если время больше 23, то курсор находится в конце диаграмм.

13)	Если поле свободного времени меньше 15 минут то оно становится не активным.

14)     При клике по полю свободного времени открывается окно создания встречи, где поля начала и конца заполняются автоматически и округляются до 15 минут. Разница начала и конца равна одному часу если это возможно, иначе равна доступному интервалу 

15) При наборе текста в поле поиска пользователей, список пользователей сортируется. 

16) Блоки встреч выделены рамкой чтоб их было видно поверх временного блока, так как по цвету они одинаковые.

17) Если встреча уже прошла (конец встречи меньше текущего времени) то кнопка редактирования этой встречи становится не доступной, т.е. прошедшие встречи доступны только на просмотр, мне показалось это логичным.

P.S. Что не успел реализовать:
(Буду комитить по мере исправления нижеперечисленных недоработок)
___________________
Подсказки при неправильном заполнении не реализованны


P.S.S. Это первая моя работа такого объема, я не умею правильно структурировать код и понял чем это черевато, с ростом приложения стало почти невозможно его писать и поддерживать, я лепил всё в кучу. Надеюсь со временем, с опытом я научусь писать грамотно структурированый код.
